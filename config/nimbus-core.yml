---
# Este fichero tiene que estar situado en la carpeta "config" de la
# gestión correspondiente o en la carpeta "config" de un cliente concreto
# (no aquí, ni en ningún otro módulo)
# El nombre del fichero puede ser nimbus-core.yml o nimbus.yml (ambos serán cargados)
# Todas las claves que aparecen serán convertidas a "synbol" (to_sym)
# por lo que no es necesario ponerles los ":" por delante, como se hace aquí en muchos casos.

## Base de datos
# Si se ponen las claves en el primer nivel las herederán tanto developmemnt como production, por lo que esas secciones son opcionales 
# Cualquier clave que no aparezca en development o production se cojerá del primer nivel y, si tampoco está, se usará el default.
db:
  database: Nombre_de_la_base_de_datos (opcional. Defecto = Si hay un cliente (nimbus -u cliente) se usará su nombre, si no, el del module de config/application.rb)
  pool: Nº de conexiones (opcional. Defecto = 2 en development y 5 en production)
  username: nombre_de_usuario (opcional. Defecto = postgres)
  password: contraseña (opcional. Defecto = "postgres")
  host: Server_de_la_base_de_datos (opcional. Defecto = sin docker el propio host, con docker, "dbhost" si ese nombre de host responde, si no, el hsot anfitrión del container
  port: Puerto del servicio (opcional. Defecto "" -así se usará el de por defecto de postgres-)
  development:
    database: Nombre_de_la_base_de_datos (opcional. Defecto = Si hay un cliente (nimbus -u cliente) se usará su nombre, si no, el del module de config/application.rb)
    pool: Nº de conexiones (opcional. Defecto = 2)
    username: nombre_de_usuario (opcional. Defecto = postgres)
    password: contraseña (opcional. Defecto = "postgres")
    host: Server_de_la_base_de_datos (opcional. Defecto = sin docker el propio host, con docker, "dbhost" si ese nombre de host responde, si no, el hsot anfitrión del container
    port: Puerto del servicio (opcional. Defecto "" -así se usará el de por defecto de postgres-)
  production:
    database: Nombre_de_la_base_de_datos (opcional. Defecto = Si hay un cliente (nimbus -u cliente) se usará su nombre, si no, el del module de config/application.rb)
    pool: Nº de conexiones (opcional. Defecto = 5)
    username: nombre_de_usuario (opcional. Defecto = postgres)
    password: contraseña (opcional. Defecto = "postgres")
    host: Server_de_la_base_de_datos (opcional. Defecto = sin docker el propio host, con docker, "dbhost" si ese nombre de host responde, si no, el hsot anfitrión del container
    port: Puerto del servicio (opcional. Defecto "" -así se usará el de por defecto de postgres-)
  
  ## Puma
  puma:
    port: Puerto del servicio (Opcional, Defecto = 3000)
    min_threads: Nº mínimo de threads (Opcional. Defecto = 1)
    max_threads: Nº máximo de threads (Opcional. Defecto = el pool definido en la sección "db")
    workers: Nº de workers (Opcional. Defecto = 0)
    bind: Cadena completa para usar en bind (port será ignarado, hay que especificarlo aquí). P.ej. "ssl://0.0.0.0:3000?key=path_to_key&cert=path_to_cert"

#
# osp (Oficina sin papeles)
# Posibles valores:
# true Habilita la oficina sin papeles con todos los valores por defecto
# hash de valores: Se indicarán los valores de las diferentes opciones
:osp:
  # Indica si al añadir un pdf a otro se debe de borrar o no
  # el fichero después de añadido (por defecto vale false)
  :pdf_add_rm: true
  :upload:
    # Indica como versionar los ficheros subidos cuando hay coincidencia de nombre.
    # Posibles valores:
    # :new Se añadirá nº de versión al fichero subido (valor por defecto)
    # :old Se añadirá nº de versión al fichero ya existente
    # :none No se versiona. El fichero subido reemplazará al existente
    :version: :new
    # Indica que hacer al subir un pdf cuyo nombre ya existe
    # Posibles valores:
    # :pre El fichero se añadirá por delante al ya existente
    # :post El fichero se añadirá por detrás al ya existente
    # :version No se hará un tratamiento especial y se seguirán los dictados
    # del tag :version (es el valor por defecto) 
    :pdf: :version
#
#
#:excluir_usuarios: true
#:excluir_paises: true
#:excluir_divisas: true
#:excluir_empresas: true
#:excluir_ejercicios: true
#:excluir_contadores: true
#:excluir_perfiles: true
#:excluir_accesos: true
#:excluir_historicos: true
#:excluir_gi: true

# Habilta la opción de mensajería
:noticias: true

# Control de p2p
# Posibles valores: O bien un número indicando el máximo número de p2p
:p2p: 30
# O un hash con límites por tags:
:p2p:
  :xls: 20
  :loff: 10
  :tot: 50
# Los tags anteriores están reservados:
# xls:  Listados que sólo generan excel
# loff: Listados que usan libreoffice para conversión a PDF o XLS
# tot:  Número total de procesos 

# API
#
# Es necesario añadir en el Gemfile la gema 'jwt'
# Para obtener el token de autentificación hay que enviar un request POST al server
# con los parámetros "usuario" y "password" a la URL: /api/login
# La validez del token la determina el campo timeout del usuario (en minutos). Si 
# el campo es nil o cero se dará una validez de una hora.
# El resto de métodos que se definan en la API deberán comenzar su ruta con /api/
# (p.ej.: /api/venta/get_cliente), tienen que ser POST y como parámetro obligatorio
# hay que pasar "jwt=xxxxx" donde "xxxxx" es el token obtenido con /api/login 
#
# Para habilitar el acceso vía API es necesario añadir la siguiente clave:
:api: true

# Enviar email si se olvida el password
# Para poder enviar un e-mail hay que configurar los datos SMTP en
# config/environmentes/production.rb (y si se quiere usar en desarrollo
# hay que configurarlo también en config/environments/development.rb)
# Un ejemplo para configurar el envío desde una cuenta de gmail sería:
#  config.action_mailer.delivery_method = :smtp
#  config.action_mailer.smtp_settings = {
#    address:              'smtp.gmail.com',
#    port:                 587,
#    user_name:            'usuario',
#    password:             'password',
#    authentication:       'plain',
#    enable_starttls_auto: true
#  }
#  config.action_mailer.default_options = {from: 'usuario@gmail.com'}
:email_password: true

# Autentificación en 2 pasos
# Por defecto está deshabilitada. Si se pone a true, además de la autentificación
# estándar (usuario y contraseña), para iniciar sesión habrá que introducir un pin
# que se enviará al e-mail que tenga configurado el usuario.
# Tener en cuenta que si se habilita, todos los usuarios deberán de tener una
# cuenta de e-mail válida y hay que configurar un método de envío (ver el apartado anterior)
:a2p: true

# Control del acceso a ERD (Diagramas entidad-relación de los modelos)
# Posibles valores:
# :admin Tienen acceso todos los usuarios admin.
# :off Nadie tiene acceso (ni el usuario "admin").
# En cualquier otro caso o si la clave no existe sólo el usuario "admin" tendrá acceso.
:erd: :admin

# Control de auditoría de usuarios.
# Permite habilitar por usuario el seguimiento de la actividad del mismo.
# Si vale true, está habilitada la auditoría y todos los usuarios admin
# podrán editar la check correspondiente de cada usuario.
# Si su valor es un array, se considerará que sólo los códigos de usuario
# contenidos en el array (que además tienen que ser admin) podrán editar la check.
:audit: true 
# Con array de usuarios:
:audit:
- admin
- pepe
- juan

# Licencias
# Si existe la clave se activa el control de licencias.
# El valor de la clave determina el número de licencias (nº de usuarios simultáneos)
:licencias: 5

# Cuota de disco
# Si existe la clave indica el tamaño máximo que se puede usar en la carpeta "data"
# (bien de la gestión global o de un cliente concreto).
# Si no existe la clave (o vale nil) el tamaño es ilimitado.
# Se pueden emplear los sufijos B, K (o KB) M (o MB), G (o GB) y T (o TB)
# para indicar Bytes, Kilobytes, Megas, Gigas o Teras.
# Si no hay subijo se asume que son bytes.
# Si el sufijo o la sintasix es errónea se usará un valor por defecto de 5GB
:cuota_disco: 10 GB

# Temas
# hay dos claves involucradas: "temas" que hay que ponerla a true para que el
# cliente pueda definir nuevos temas, y "tema" que es un hash con todos (o parte de)
# los parámetros que definen un tema. Si no existe esta última clave se usará
# el tema por defecto de Nimbus (morado/rosa), si sólo hay definidos algunos de
# los parámetros, el resto se cogerán del tema por defecto. A modo de ejemplo
# se ponen aquí todos los parámetros del tema por defecto (obviamente no tiene
# sentido poner estos valores ya que son los que se usarían de todas formas).
# Aunque no exista la clave "temas" (o valga nil/false), que implicaría que el
# cliente no puede gestionar los temas, se puede poner un tema concreto para
# personalizar la gestión. 
:temas: true
:tema:
  --color-1: "#673ab7"
  --color-1_f: "#ffffff"
  --color-1-2: "#d1c4e9"
  --color-1-2_f: "#000000"
  --color-1-3: "#ede7f6"
  --color-1-3_f: "#000000"
  --color-2: "#ff4081"
  --color-2_f: "#ffffff"
  --color-2-2: "#f8bbd0"
  --color-2-2_f: "#000000"
  --color-2-3: "#ffe5ee"
  --color-2-3_f: "#000000"
  --jqg-head-color: "#ede7f6"
  --jqg-head-color_f: "#000000"
  --jqg-head-column-color: "#d1c4e9"
  --jqg-head-column-color_f: "#000000"
  --jqg-row-selected-color: "#adff2f"
  --jqg-row-selected-color_f: "#000000"
  --jqg-active-cell-color: "#ede7f6"
  --jqg-active-cell-color_f: "#000000"
  --mdl-button-radius: 4px
  --mdl-button-fab-radius: 50%
