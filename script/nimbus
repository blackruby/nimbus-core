#!/usr/local/bin/ruby

require 'fileutils'

def help
  hlp = "{Sintaxis}\n"
  hlp << "    nimbus [opciones]...\n"
  hlp << "\n"
  hlp << "{Descripción}:\n"
  hlp << "    Atajo para lanzar los distintos servicios de Rails controlando el entorno.\n"
  hlp << "\n"
  hlp << "{Opciones}:\n"
  hlp << "\n"
  hlp << "{-a}\n" 
  hlp << "    Se lanazarán instancias de Puma para cada cliente definido, si no hubiera ninguno,\n" 
  hlp << "    se usará el entorno normal (home de la aplicación). Se usará el modo 'production'\n"
  hlp << "    y se ignorarán el resto de opciones.\n"
  hlp << "\n"
  hlp << "{-c}\n"
  hlp << "    Abre una consola Rails.\n"
  hlp << "\n"
  hlp << "{-h}\n"
  hlp << "    Muestra esta ayuda\n"
  hlp << "\n"
  hlp << "{-i}\n"
  hlp << "    Modo 'init'. Sirve para usarlo como comando de arranque en un contenedor docker.\n"
  hlp << "    En este caso el resto de opciones serán ignoradas y no se realizará ninguna tarea.\n"
  hlp << "    Su único propósito es mantener activo el contenedor para usarlo desde un terminal.\n"
  hlp << "    También se encarga de acabar con los procesos zombis que se generen.\n"
  hlp << "    Esta opción será ignorada si se usa fuera del contexto aludido.\n"
  hlp << "\n"
  hlp << "{-l}\n"
  hlp << "    Modo 'local'. Sólo válido con -p. Se lanzará Rails en 'production' pero sin\n"
  hlp << "    demonizar (igual que 'development' y con el nivel máximo de logging.\n"
  hlp << "    Este modo es útil para hacer debug en producción.\n"
  hlp << "\n"
  hlp << "{-p}\n"
  hlp << "    Se usará el modo 'production'.\n"
  hlp << "\n"
  hlp << "{-u} <cliente>\n"
  hlp << "    Se usará el entorno y configuración de <cliente>.\n"
  hlp << "\n"
  hlp << "{-r} <string>\n"
  hlp << "    Se pasará <string> a rake para que realice la tarea especificada.\n"
  hlp << "\n"
  hlp << "{Ejemplos}:\n"
  hlp << "\n"
  hlp << "Lanza Rails en modo 'development' (equivalente a rails server)\n"
  hlp << "  {nimbus}\n" 
  hlp << "\n"
  hlp << "Lanza Rails en modo 'production' con el entorno del cliente pepe\n"
  hlp << "  {nimbus} -p -u pepe\n" 
  hlp << "\n"
  hlp << "Lanza Rails en modo 'production' con el entorno del cliente pepe sin demonizar\n"
  hlp << "  {nimbus} -p -l -u pepe\n" 
  hlp << "\n"
  hlp << "Abre una consola Rails en modo 'production' con el entorno del cliente pepe\n"
  hlp << "  {nimbus} -c -p -u pepe\n" 
  hlp << "\n"
  hlp << "Precompila los assets en modo 'production'\n"
  hlp << "  {nimbus} -p -r assets:prcompile\n"

  IO.popen({}, 'more', 'w') {|p| p.write hlp.gsub('{', "\e[1m").gsub('}', "\e[0m")}
  exit
end

def back(cli, multi = false)
  h = fork {
    path = cli ? "clientes/#{cli}/log" : 'log'
    FileUtils.mkpath(path)
    unless @init
      log = ENV['NIMBUS_DOCKER'] ? File.open('/proc/1/fd/1', 'a') : File.new("#{path}/nimbus.log", 'w')
      STDOUT.reopen(log)
      STDOUT.sync = true
      STDERR.reopen(log)
      STDERR.sync = true
    end
    STDIN.reopen("/dev/null", "r")
    exec "RAILS_ENV=production NIMBUS_LOCAL=false #{@init && multi ? 'NIMBUS_MULTI=true' : ''} #{cli ? 'NIMBUS_CLI=' + cli : ''} rails server --pid=#{path}/puma.pid"
  }
  Process.detach(h) unless @init
end
      
####### Main

@init = (Process.pid == 1)
`rm -f /rails/clientes/*/log/puma.pid /rails/log/puma.pid` if @init

if !File.exist?('.nimbus_ini')
  FileUtils.touch('.nimbus_ini')

  # Crear el manifiesto para sprockets (si no existe)
  FileUtils.mkdir_p('app/assets/config') unless Dir.exist?('app/assets/config')
  File.write('app/assets/config/manifest.js', '') unless File.exist?('app/assets/config/manifest.js')

  # Copiar r7_tree
  Dir.glob('modulos/nimbus-core/script/r7_tree/**/*') {|f|
    d = f.sub('modulos/nimbus-core/script/r7_tree/', '')
    if Dir.exist?(f)
      FileUtils.mkdir_p(d) unless Dir.exist?(d)
    else
      `cp -d #{f} #{d}` unless File.exist?(d)
    end
  }
end

Signal.trap('TERM') do
  if @init
    Dir.glob('/proc/*[0-9]*') {|p|
      p = p.split('/')[2].to_i
      Process.kill('TERM', p) if p > 1
    }
    Process.waitall
  end
  exit
end

help if ARGV.include?('-h')

if ARGV.include?('-i')
  if @init
    fork {exec 'sleep infinity'}
    loop{Process.wait} rescue nil
    exit
  end
end

if ARGV.include?('-a')
  cl = Dir.glob('clientes/*')
  cl.size > 0 ? cl.each {|c| back(c.split('/')[1], cl.size > 1) if File.directory?(c)} : back(nil)
  (loop{Process.wait} rescue nil) if @init
  exit
end

env = []

if ARGV.include?('-p')
  renv = 'production'
elsif ARGV.include?('-d')
  renv = 'development'
else
  renv = ENV['RAILS_ENV'] || 'development'
end
env << "RAILS_ENV=#{renv}"
local = ARGV.include?('-l')
env << 'NIMBUS_LOCAL=true' if local
iu = ARGV.index '-u'
if iu
  usu = ARGV[iu + 1]
elsif !ENV['NIMBUS_CLI'].to_s.strip.empty?
  usu = ENV['NIMBUS_CLI']
else
  usu = nil
end

if usu
  unless Dir.exist? "clientes/#{usu}"
    puts "No existe el cliente #{usu}"
    exit 1
  end
  env << "NIMBUS_CLI=#{usu}"
end

if ARGV.include? '-c'
  cmd = 'rails console'
elsif (ir = ARGV.index('-r'))
  cmd = "rake #{ARGV[ir + 1]}"
else
  if renv == 'production' && !local
    back usu
    (loop{Process.wait} rescue nil) if @init
    exit
  else
    path = usu ? "clientes/#{usu}/log" : 'log'
    FileUtils.mkpath(path)
    cmd = "rails server --pid=#{path}/puma.pid"
  end
end

if @init
  spawn "#{env.join(' ')} #{cmd}"
  loop{Process.wait} rescue nil
else
  exec "#{env.join(' ')} #{cmd}"
end
